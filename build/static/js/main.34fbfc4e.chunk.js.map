{"version":3,"sources":["Canvas.js","actions/index.js","download.js","App.js","reportWebVitals.js","reducers/entityList.js","reducers/index.js","index.js"],"names":["Canvas","canvas","ctx","BB","WIDTH","HEIGHT","entityCount","addedEtityList","entityList","dispatch","useDispatch","useEffect","document","getElementById","getContext","getBoundingClientRect","left","top","width","height","onmousedown","myDown","onmouseup","myUp","clear","toggleEtityForm","eleId","element","includes","classList","add","toggle","console","log","e","preventDefault","stopPropagation","clearRect","rect","x","y","w","h","name","beginPath","strokeText","fill","closePath","addEntity","type","fillStyle","startPoint","moveTo","lineTo","stroke","push","drawEntity","startDrawingCanvas","tempUser","entity_list","target","value","addEtityData","className","onClick","id","onSubmit","role","placeholder","title","required","style","border","Download","props","useSelector","state","entity","href","event","el","data","encodeURIComponent","JSON","stringify","setAttribute","downloadEntityList","label","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","entityReducer","action","allRerducers","combineReducers","store","createStore","allReducers","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render"],"mappings":"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","file":"static/js/main.34fbfc4e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { add_entity } from './actions';\n\nconst Canvas = () => {\n\n    // get canvas related references\n    let canvas = null,\n        ctx = null,\n        BB = null,\n        offsetX = null,\n        offsetY = null,\n        WIDTH = null,\n        HEIGHT = null,\n        entityCount = 0,\n        addedEtityList = [],\n        entityList = [],\n        dispatch = useDispatch();\n\n\n    useEffect(() => {\n        canvas = document.getElementById(\"canvas\");\n        ctx = canvas.getContext(\"2d\");\n        BB = canvas.getBoundingClientRect();\n        offsetX = BB.left;\n        offsetY = BB.top;\n        WIDTH = canvas.width;\n        HEIGHT = canvas.height;\n        canvas.onmousedown = myDown;\n        canvas.onmouseup = myUp;\n        clear();\n    }, [])\n\n    const toggleEtityForm = (eleId) => {\n        let element = document.getElementById(eleId);\n        if (!addedEtityList.includes(eleId)) {\n            element.classList.toggle(\"hide\");\n        } else {\n            element.classList.add(\"hide\");\n        }\n        console.log(\"entityList\", entityList)\n    }\n\n    // handle mousedown events\n    const myDown = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        console.log(\"mouse down\")\n    }\n\n\n    // handle mouseup events\n    const myUp = (e) => {\n        // tell the browser we're handling this mouse event\n        e.preventDefault();\n        e.stopPropagation();\n    }\n    const clear = () => {\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n    }\n\n    const drawEntity = (type, name) => {\n\n        ctx.fillStyle = \"#FAF7F8\";\n        ctx.fillStyle = 'transparent';\n        let startPoint = 150 * entityCount + 10;\n        console.log(\"data\", startPoint)\n        rect(startPoint, 40, 100, 23, name);\n        if (entityCount > 0) {\n            ctx.moveTo(startPoint - 50, 50);\n            ctx.lineTo(startPoint, 50);\n        }\n\n        ctx.stroke();\n        addedEtityList.push(type);\n    }\n\n    const rect = (x, y, w, h, name) => {\n        ctx.beginPath();\n        ctx.rect(x, y, w, h);\n        ctx.strokeText(name, x + 30, y + 15, w, h);\n        ctx.fill();\n        ctx.closePath();\n\n    }\n\n\n\n    const addEntity = (type, name) => {\n        if (!addedEtityList.includes(type)) {\n            drawEntity(type, name);\n            entityCount++;\n        }\n    }\n\n    const startDrawingCanvas = (tempUser, e) => {\n        dispatch(add_entity(tempUser));\n        addEntity(e.target.name, e.target[0].value);\n        addedEtityList.push(e.target[0].name);\n        toggleEtityForm(e.target[0].name);\n    }\n\n    const addEtityData = (e) => {\n        e.preventDefault();\n\n        if (e.target.name == 'customer') {\n            let tempUser = {\n                \"entityType\": \"Customer\",\n                \"customerId\": \"Customer1\",\n                'customerName': e.target[0].value,\n                'customerEmail': e.target[1].value,\n                'customerBankCode': e.target[2].value\n            }\n            startDrawingCanvas(tempUser, e);\n\n        } else if (e.target.name == 'payment') {\n            let tempUser = {\n                \"entityType\": \"Payment Mode\",\n                \"paymentModeid\": \"Payment1\",\n                'paymentMode': e.target[0].value,\n                'issuer': e.target[1].value,\n                'last4DigitsAccNo': e.target[2].value,\n                'payeeCode': e.target[3].value\n            }\n\n           startDrawingCanvas(tempUser, e);\n\n        } else if (e.target.name == 'marchent') {\n           let tempUser = {\n                \"entityType\": \"Merchant\",\n                \"merchantId\": \"Merchant1\",\n                'merchantName': e.target[0].value,\n                'merchantCode': e.target[1].value,\n                'merchantBankCode': e.target[2].value\n            }\n\n            startDrawingCanvas(tempUser, e);\n\n        } else {\n            console.log(\"Invalid choice!\")\n        }\n    }\n\n    return (\n        <>\n            <section className='canvas-wp'>\n                <section className='menu-bar'>\n                    <section>\n                        <button onClick={(e) => toggleEtityForm('customerName')}>Customer</button>\n                        <section className='customerFormWp hide' id=\"customerName\">\n                            <form name=\"customer\" onSubmit={(e) => addEtityData(e)}>\n                                <input type=\"text\" name=\"customerName\" role=\"customerName\" placeholder='customer Name' title='customer Name' required />\n                                <br />\n                                <input type=\"text\" name=\"customerEmail\" role=\"customerEmail\" placeholder='customer Email' title='customer Email' required />\n                                <br />\n                                <input type=\"text\" name=\"customerBankCode\" role=\"customerBankCode\" placeholder='customer Bank Code' title='customer Bank Code' required />\n                                <br /><br />\n                                <button>Update</button>\n                            </form>\n                        </section>\n\n                    </section>\n                    <section>\n                        <button onClick={(e) => toggleEtityForm('merchantName')}>Marchent</button>\n                        <section className='customerFormWp hide' id=\"merchantName\">\n                            <form name=\"marchent\" onSubmit={(e) => addEtityData(e)}>\n                                <input type=\"text\" name=\"merchantName\" role=\"merchantName\" placeholder='merchant Name' title='merchant Name' required />\n                                <br />\n                                <input type=\"text\" name=\"merchantName\" role=\"merchantName\" placeholder='merchant Code' title='merchant Code' required />\n                                <br />\n                                <input type=\"text\" name=\"merchantBankCode\" role=\"merchantBankCode\" placeholder='merchant Bank Code' title='merchant Bank Code' required />\n                                <br /><br />\n                                <button>Update</button>\n                            </form>\n                        </section>\n\n                    </section>\n                    <section>\n                        <button onClick={(e) => toggleEtityForm('paymentMode')}>Payment</button>\n                        <section className='customerFormWp hide' id=\"paymentMode\">\n                            <form name=\"payment\" onSubmit={(e) => addEtityData(e)}>\n                                <input type=\"text\" name=\"paymentMode\" role=\"paymentMode\" placeholder='payment Mode' title='payment Mode' required />\n                                <br />\n                                <input type=\"text\" name=\"issuer\" role=\"issuer\" placeholder='issuer' title='issuer' required />\n                                <br />\n                                <input type=\"text\" name=\"last4DigitsAccNo\" role=\"last4DigitsAccNo\" placeholder='last4DigitsAccNo' title='last4DigitsAccNo' required />\n                                <br />\n                                <input type=\"text\" name=\"payeeCode\" role=\"payeeCode\" placeholder='payeeCode' title='payeeCode' required />\n                                <br /><br />\n                                <button>Update</button>\n                            </form>\n                        </section>\n\n                    </section>\n                   \n                </section>\n                <section className=\"canvas-area\" id=\"canvasArea\">\n                    <canvas id=\"canvas\" width='800' height='500' style={{ border: '1px solid #000000' }}></canvas>\n                </section>\n\n            </section>\n        </>\n    )\n}\n\nexport default Canvas;","export const add_entity = (entity) =>{\n    return {\n        type: \"ADD\",\n        entity_list: entity\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\n\nconst Download = (props) => {\n    const entityList = useSelector(state => state.entity);\n    const downloadEntityList = (event) => {\n        console.log(\"event: \", event.target);\n        let el = event.target;\n        let data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify({\"transactionWorkflow\":[...entityList]}));\n        el.setAttribute(\"href\", \"data:\" + data);\n        el.setAttribute(\"download\", \"data.json\");\n    }\n    return (\n        <>\n            <a href=\"#\" onClick={(e) => downloadEntityList(e)}>{props.label}</a>\n        </>\n    )\n}\n\nexport default Download;","import arrow from './arrow.png';\nimport './App.css';\nimport React, { useState } from 'react';\nimport Canvas from './Canvas';\nimport Download from './download'\n\nfunction App() {\n   \n    return (\n        <div className=\"App\">\n            <header>\n                <h1>Transaction Flowchart Modal</h1>\n\n            </header>\n            <main>\n                <Canvas />\n               \n            </main>\n            <footer>\n                <br/>\n                <Download label={'Download Entity'} />\n            </footer>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const entityReducer = (state = [], action) =>{\n    switch(action.type){\n        case 'ADD' :\n            state.push(action.entity_list);\n            return state;\n        \n        default:\n            return state;\n    }\n\n}\nexport default entityReducer;","import entityReducer from './entityList';\nimport {combineReducers} from 'redux';\n\n\nconst allRerducers = combineReducers({\n    entity: entityReducer\n})\n\nexport default allRerducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport allReducers from './reducers';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n  <Provider store={store}> <App /> </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}